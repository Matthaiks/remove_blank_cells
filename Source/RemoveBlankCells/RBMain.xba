<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="RBMain" script:language="StarBasic" script:moduleType="normal">Option Explicit

&apos;Global reference for the RBDlg dialog
Dim oRBDlg

&apos;************************************************************************************
&apos;
&apos;Main method called when &quot;Remove Blank Cells&quot; is clicked
&apos;This mainly determines the course of action based on the currently selected range
&apos;
&apos;************************************************************************************
Sub Remove_Blanks_Click
	&apos;Gets the current selection
	Dim currentSel : currentSel = ThisComponent.getCurrentSelection()
	&apos;Determines the type of selection
	If currentSel.supportsService(&quot;com.sun.star.sheet.SheetCell&quot;) Then
		&apos;A single cell is selected. Does nothing.
		MsgBox(&quot;You have selected a single cell.&quot; &amp; CHR(13) &amp; _
			&quot;This action can only be performed over a single range.&quot;, _
			MB_OK + MB_ICONEXCLAMATION, Title := &quot;Remove Blank Cells&quot;)
	ElseIf currentSel.supportsService(&quot;com.sun.star.sheet.SheetCellRange&quot;) Then
		&apos;A single range is selected. Now we need to define if it is a single row, single column or a matrix selection
		Dim nRows, nCols
		nRows = currentSel.Rows.getCount()
		nCols = currentSel.Columns.getCount()
		&apos;Starts a new Undo context
		Dim undoMgr
		undoMgr = ThisComponent.UndoManager
		undoMgr.enterUndoContext(&quot;Remove Blank Cells&quot;)
		&apos;Determines what needs to be made
		If nRows = 1 And nCols &gt; 1 Then
			RB_SingleRow
		ElseIf nRows &gt; 1 And nCols = 1 Then
			&apos;Call the method that removes blanks in a single column
			RB_SingleColumn
		ElseIf nRows &gt; 1 And nCols &gt; 1 Then
			&apos;Show the dialog for the user to decide what to do
			RBDlg_Show
		Else
			&apos;If it enters here, then the selection is invalid
			MsgBox &quot;The selected range is invalid.&quot;, MB_OK + MB_ICONEXCLAMATION, Title := &quot;Remove Blank Cells&quot;
		End If
		&apos;Leaves the Undo context
		undoMgr.leaveUndoContext(&quot;Remove Blank Cells&quot;)
	ElseIf currentSel.supportsService(&quot;com.sun.star.sheet.SheetCellRanges&quot;) Then
		&apos;Multiple ranges are selected. This extension supports only single ranges.
		MsgBox &quot;You have multiple ranges selected.&quot; &amp; CHR(13) &amp; &quot;This action can only be performed over a single range.&quot;, _
			MB_OK + MB_ICONEXCLAMATION, Title := &quot;Remove Blank Cells&quot;
	Else
		&apos;If it enters here, then the selection is invalid
		MsgBox &quot;The selected range is invalid.&quot;, MB_OK + MB_ICONEXCLAMATION, Title := &quot;Remove Blank Cells&quot;
	End If
End Sub


&apos;************************************************************************************
&apos;
&apos;This method is called when a single column is selected
&apos;Performs the removal of blank cells in a single column range
&apos;
&apos;************************************************************************************
Sub RB_SingleColumn
	&apos;Locks screen updating
	ThisComponent.lockControllers()
	ThisComponent.addActionLock()
	&apos;If an error occurs, make sure the locks are released back
	On Local Error Goto Catch
	
	&apos;Get the current selection
	Dim oSel : oSel = ThisComponent.CurrentSelection
	
	&apos;Get the starting sheet number and position of the current selection
	Dim sheetID  : sheetID  = oSel.RangeAddress.Sheet
	Dim startCol : startCol = oSel.RangeAddress.StartColumn
	Dim startRow : startRow = oSel.RangeAddress.StartRow
	Dim endRow   : endRow   = oSel.RangeAddress.EndRow
	
	&apos;Query empty ranges in current selection
	Dim emptyRanges : emptyRanges = oSel.queryEmptyCells()
	Dim qtEmptyRanges : qtEmptyRanges = emptyRanges.Count
	
	&apos;If there are no empty ranges, exit the sub
	If qtEmptyRanges = 0 Then Goto ReleaseLock
	
	&apos;If there are more that 100 ranges, show progress bar
	Dim bShowProgress as Boolean
	Dim oProgDlg as Object
	Dim oProgControl as Object
	Dim oLabControl as Object
	bShowProgress = False
	If qtEmptyRanges &gt; 100 Then
		bShowProgress = True
		DialogLibraries.LoadLibrary(&quot;RemoveBlankCells&quot;)
		oProgDlg = CreateUNODialog(DialogLibraries.RemoveBlankCells.ProgDialog)
		oLabControl = oProgDlg.getModel().getByName(&quot;LabelInfo&quot;)
		oProgControl = oProgDlg.getModel().getByName(&quot;ProgressControl&quot;)
		oProgControl.ProgressValueMin = 0
		oProgControl.ProgressValueMax = 100
		oProgControl.ProgressValue = 0
		CenterDialog(oProgDlg)
		oProgDlg.SetVisible(True)
	End If
	
	&apos;Get the number of non-empty cells using the COUNTA function
	Dim fa : fa = createUNOService(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	Dim numCellsWithValue as Variant
	numCellsWithValue = fa.callFunction(&quot;COUNTA&quot;, Array(ThisComponent.Sheets(sheetID).getCellRangeByName(oSel.AbsoluteName)))
	
	&apos;If there are no values in the selection, then nothing needs to be done
	If numCellsWithValue = 0 Then Goto ReleaseLock
	
	&apos;Updates the Label information in the Progress Dialog
	If bShowProgress Then oLabControl.Label = &quot;Removing blank cells...&quot;
	
	&apos;Array with the ranges of empty cells
	Dim arrEmptyRanges : arrEmptyRanges = emptyRanges.RangeAddresses
	
	&apos;Control the advance of the progress bar (for each 1%)
	Dim progressStep As Long
	Dim currentProgress as Integer
	Dim progressCount As Integer
	progressStep = qtEmptyRanges / 100
	currentProgress = 0
	progressCount = 0
	
	&apos;Remove empty ranges in reverse
	Dim i as Long
	Dim curRange as Object
	For i = UBound(arrEmptyRanges) to 0 Step -1
		curRange = arrEmptyRanges(i)
		ThisComponent.Sheets(sheetID).RemoveRange(curRange, com.sun.star.sheet.CellDeleteMode.UP)
		
		&apos;Updates the progress bar if it&apos;s shown
		If bShowProgress Then
			progressCount = progressCount + 1
			If progressCount &gt;= progressStep Then
				currentProgress = currentProgress + 1
				If currentProgress &gt; 100 Then currentProgress = 100
				oProgControl.ProgressValue = currentProgress
				oLabControl.Label = &quot;Removing blank cells... &quot; &amp; currentProgress &amp; &quot;%&quot;
				progressCount = 0
			End If
		End If
	Next i
	
	&apos;Inserts back the removed rows at the end of the new range (to preserve the position of cells outside the selected range)
	curRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, startRow + numCellsWithValue, startCol, endRow)
	ThisComponent.Sheets(sheetID).InsertCells(curRange.RangeAddress, com.sun.star.sheet.CellInsertMode.DOWN)
	
	&apos;Select the new range with the processed values
	Dim newRange as Object
	newRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, startRow, startCol, startRow + numCellsWithValue - 1)
	ThisComponent.CurrentController.Select(newRange)
	
	ReleaseLock:
	&apos;Unlocks screen updating
	ThisComponent.removeActionLock()
	ThisComponent.unlockControllers()
	Exit Sub
	
	&apos;Catches unexpected exception
	Catch:
		ShowBugWarning
		GoTo ReleaseLock
End Sub


&apos;************************************************************************************
&apos;
&apos;This method is called when a single row is selected
&apos;Performs the removal of blank cells in a single row range
&apos;
&apos;************************************************************************************
Sub RB_SingleRow
	&apos;Locks screen updating
	ThisComponent.lockControllers()
	ThisComponent.addActionLock()
	&apos;If an error occurs, make sure the locks are released back
	On Local Error Goto Catch
	
	&apos;Get the current selection
	Dim oSel : oSel = ThisComponent.CurrentSelection
	
	&apos;Get the starting sheet number and position of the current selection
	Dim sheetID  : sheetID  = oSel.RangeAddress.Sheet
	Dim startCol : startCol = oSel.RangeAddress.StartColumn
	Dim startRow : startRow = oSel.RangeAddress.StartRow
	Dim endCol   : endCol   = oSel.RangeAddress.EndColumn
	
	&apos;Query empty ranges in current selection
	Dim emptyRanges : emptyRanges = oSel.queryEmptyCells()
	Dim qtEmptyRanges : qtEmptyRanges = emptyRanges.Count
	
	&apos;If there are no empty ranges, exit the sub
	If qtEmptyRanges = 0 Then Goto ReleaseLock
	
	&apos;If there are more that 100 ranges, show progress bar
	Dim bShowProgress as Boolean
	Dim oProgDlg as Object
	Dim oProgControl as Object
	Dim oLabControl as Object
	bShowProgress = False
	If qtEmptyRanges &gt; 100 Then
		bShowProgress = True
		DialogLibraries.LoadLibrary(&quot;RemoveBlankCells&quot;)
		oProgDlg = CreateUNODialog(DialogLibraries.RemoveBlankCells.ProgDialog)
		oLabControl = oProgDlg.getModel().getByName(&quot;LabelInfo&quot;)
		oProgControl = oProgDlg.getModel().getByName(&quot;ProgressControl&quot;)
		oProgControl.ProgressValueMin = 0
		oProgControl.ProgressValueMax = 100
		oProgControl.ProgressValue = 0
		CenterDialog(oProgDlg)
		oProgDlg.SetVisible(True)
	End If
	
	&apos;Get the number of non-empty cells using the COUNTA function
	Dim fa : fa = createUNOService(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	Dim numCellsWithValue as Variant
	numCellsWithValue = fa.callFunction(&quot;COUNTA&quot;, Array(ThisComponent.Sheets(sheetID).getCellRangeByName(oSel.AbsoluteName)))
	
	&apos;If there are no values in the selection, then nothing needs to be done
	If numCellsWithValue = 0 Then Goto ReleaseLock
	
	&apos;Updates the Label information in the Progress Dialog
	If bShowProgress Then oLabControl.Label = &quot;Removing blank cells...&quot;
	
	&apos;Array with the ranges of empty cells
	Dim arrEmptyRanges : arrEmptyRanges = emptyRanges.RangeAddresses
	
	&apos;Control the advance of the progress bar (for each 1%)
	Dim progressStep As Long
	Dim currentProgress as Integer
	Dim progressCount As Integer
	progressStep = qtEmptyRanges / 100
	currentProgress = 0
	progressCount = 0
	
	&apos;Remove empty ranges in reverse
	Dim i as Long
	Dim curRange as Object
	For i = UBound(arrEmptyRanges) to 0 Step -1
		curRange = arrEmptyRanges(i)
		ThisComponent.Sheets(sheetID).RemoveRange(curRange, com.sun.star.sheet.CellDeleteMode.LEFT)
		
		&apos;Updates the progress bar if it&apos;s shown
		If bShowProgress Then
			progressCount = progressCount + 1
			If progressCount &gt;= progressStep Then
				currentProgress = currentProgress + 1
				If currentProgress &gt; 100 Then currentProgress = 100
				oProgControl.ProgressValue = currentProgress
				oLabControl.Label = &quot;Removing blank cells... &quot; &amp; currentProgress &amp; &quot;%&quot;
				progressCount = 0
			End If
		End If
	Next i
	
	&apos;Inserts back the removed columns at the end of the new range (to preserve the position of cells outside the selected range)
	curRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol + numCellsWithValue, startRow, endCol, startRow)
	ThisComponent.Sheets(sheetID).InsertCells(curRange.RangeAddress, com.sun.star.sheet.CellInsertMode.RIGHT)
	
	&apos;Select the new range with the processed values
	Dim newRange as Object
	newRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, startRow, startCol + numCellsWithValue - 1, startRow)
	ThisComponent.CurrentController.Select(newRange)
	
	ReleaseLock:
	&apos;Unlocks screen updating
	ThisComponent.removeActionLock()
	ThisComponent.unlockControllers()
	Exit Sub
	
	&apos;Catches unexpected exception
	Catch:
		ShowBugWarning
		GoTo ReleaseLock
End Sub


&apos;************************************************************************************
&apos;
&apos;This method is called when a matrix is selected
&apos;Performs the removal all blank rows (rows with no values - all empty)
&apos;
&apos;************************************************************************************
Sub RB_RemoveEmptyRows
	&apos;Locks screen updating
	ThisComponent.lockControllers()
	ThisComponent.addActionLock()
	&apos;If an error occurs, make sure the locks are released back
	On Local Error Goto Catch
	
	&apos;Get the current selection
	Dim oSel : oSel = ThisComponent.CurrentSelection
	
	&apos;Get the starting sheet number and position of the current selection
	Dim sheetID   : sheetID   = oSel.RangeAddress.Sheet
	Dim startCol  : startCol  = oSel.RangeAddress.StartColumn
	Dim startRow  : startRow  = oSel.RangeAddress.StartRow
	Dim endCol    : endCol    = oSel.RangeAddress.EndColumn
	Dim endRow    : endRow    = oSel.RangeAddress.EndRow
	
	&apos;Get the maximum number of rows and columns in the sheet
	Dim maxRow as Long, maxCol as Long
	Dim cursor : cursor = ThisComponent.Sheets(SheetID).createCursor()
	cursor.gotoEndOfUsedArea(False)
	maxRow = cursor.RangeAddress.StartRow
	maxCol = cursor.RangeAddress.StartColumn

	&apos;Adjust the selection address based on maxRow and maxCol
	If endCol &gt; maxCol Then endCol = maxCol
	If endRow &gt; maxRow Then endRow = maxRow
	
	&apos;Calculate the width and height of the selection
	Dim selWidth  : selWidth  = endCol - startCol + 1
	Dim selHeight : selHeight = endRow - startRow + 1
	
	&apos;If the number of rows is greater than 200 show dialog
	Dim bShowProgress as Boolean
	Dim oProgDlg as Object
	Dim oProgControl as Object
	Dim oLabControl as Object
	bShowProgress = False
	If selHeight &gt; 200 Then
		bShowProgress = True
		DialogLibraries.LoadLibrary(&quot;RemoveBlankCells&quot;)
		oProgDlg = CreateUNODialog(DialogLibraries.RemoveBlankCells.ProgDialog)
		oLabControl = oProgDlg.getModel().getByName(&quot;LabelInfo&quot;)
		oProgControl = oProgDlg.getModel().getByName(&quot;ProgressControl&quot;)
		oProgControl.ProgressValueMin = 0
		oProgControl.ProgressValueMax = 100
		oProgControl.ProgressValue = 0
		CenterDialog(oProgDlg)
		oProgDlg.SetVisible(True)
	End If
	
	&apos;Control the advance of the progress bar (for each 1%)
	Dim progressStep As Long
	Dim currentProgress as Integer
	Dim progressCount As Integer
	progressStep = selHeight / 100
	currentProgress = 0
	progressCount = 0
	
	&apos;Used to call sheet functions
	Dim fa : fa = createUNOService(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	
	&apos;Check if there are any values in the selected area
	Dim qtValues as Long
	qtValues = fa.callFunction(&quot;COUNTA&quot;, Array(ThisComponent.Sheets(sheetID).getCellRangeByName(oSel.AbsoluteName)))
	If qtValues = 0 Then Goto ReleaseLock
	
	&apos;Updates the Label information in the Progress Dialog
	If bShowProgress Then oLabControl.Label = &quot;Removing blank rows...&quot;
	
	&apos;Iterates from the last to the first row and removes blank rows
	Dim i as Long
	Dim countDeleted as Long
	Dim curRange as Object
	Dim countBlank as Integer
	For i = endRow to startRow Step -1
		&apos;Test if row is completely blank
		curRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, i, endCol, i)
		countBlank = fa.callFunction(&quot;COUNTBLANK&quot;, Array(curRange))
		&apos;If row is blank, then remove it
		If countBlank = selWidth Then
			ThisComponent.Sheets(sheetID).RemoveRange(curRange.RangeAddress, com.sun.star.sheet.CellDeleteMode.UP)
			countDeleted = countDeleted + 1
		End If
		
		&apos;Updates the progress bar if it&apos;s shown
		If bShowProgress Then
			progressCount = progressCount + 1
			If progressCount &gt;= progressStep Then
				currentProgress = currentProgress + 1
				If currentProgress &gt; 100 Then currentProgress = 100
				oLabControl.Label = &quot;Removing blank rows... &quot; &amp; currentProgress &amp; &quot;%&quot; 
				oProgControl.ProgressValue = currentProgress
				progressCount = 0
			End If
		End If
	Next i
	
	&apos;If no rows were removed, exit the sub
	If countDeleted = 0 Then Goto ReleaseLock
	
	&apos;Inserts back the removed rows at the end of the new range (to preserve the position of cells outside the selected range)
	curRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, startRow + (selHeight - countDeleted), endCol, endRow)
	ThisComponent.Sheets(sheetID).InsertCells(curRange.RangeAddress, com.sun.star.sheet.CellInsertMode.DOWN)
	
	&apos;Select the new range after removing blanks
	Dim newRange as Object
	newRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, startRow, endCol, startRow + (selHeight - countDeleted) - 1)
	ThisComponent.CurrentController.Select(newRange)
	
	ReleaseLock:
	&apos;Unlocks screen updating
	ThisComponent.removeActionLock()
	ThisComponent.unlockControllers()
	Exit Sub
	
	&apos;Catches unexpected exception
	Catch:
		ShowBugWarning
		GoTo ReleaseLock
End Sub


&apos;************************************************************************************
&apos;
&apos;This method is called when a matrix is selected
&apos;Performs the removal all blank columns (columns with no values - all empty)
&apos;
&apos;************************************************************************************
Sub RB_RemoveEmptyColumns
	&apos;Locks screen updating
	ThisComponent.lockControllers()
	ThisComponent.addActionLock()
	&apos;If an error occurs, make sure the locks are released back
	On Local Error Goto Catch
	
	&apos;Get the current selection
	Dim oSel : oSel = ThisComponent.CurrentSelection
	
	&apos;Get the starting sheet number and position of the current selection
	Dim sheetID   : sheetID   = oSel.RangeAddress.Sheet
	Dim startCol  : startCol  = oSel.RangeAddress.StartColumn
	Dim startRow  : startRow  = oSel.RangeAddress.StartRow
	Dim endCol    : endCol    = oSel.RangeAddress.EndColumn
	Dim endRow    : endRow    = oSel.RangeAddress.EndRow
	
	&apos;Get the maximum number of rows and columns in the sheet
	Dim maxRow as Long, maxCol as Long
	Dim cursor : cursor = ThisComponent.Sheets(SheetID).createCursor()
	cursor.gotoEndOfUsedArea(False)
	maxRow = cursor.RangeAddress.StartRow
	maxCol = cursor.RangeAddress.StartColumn

	&apos;Adjust the selection address based on maxRow and maxCol
	If endCol &gt; maxCol Then endCol = maxCol
	If endRow &gt; maxRow Then endRow = maxRow
	
	&apos;Calculate the width and height of the selection
	Dim selWidth  : selWidth  = endCol - startCol + 1
	Dim selHeight : selHeight = endRow - startRow + 1
	
	&apos;If the number of columns is greater than 200 show dialog
	Dim bShowProgress as Boolean
	Dim oProgDlg as Object
	Dim oProgControl as Object
	Dim oLabControl as Object
	bShowProgress = False
	If selWidth &gt; 200 Then
		bShowProgress = True
		DialogLibraries.LoadLibrary(&quot;RemoveBlankCells&quot;)
		oProgDlg = CreateUNODialog(DialogLibraries.RemoveBlankCells.ProgDialog)
		oLabControl = oProgDlg.getModel().getByName(&quot;LabelInfo&quot;)
		oProgControl = oProgDlg.getModel().getByName(&quot;ProgressControl&quot;)
		oProgControl.ProgressValueMin = 0
		oProgControl.ProgressValueMax = 100
		oProgControl.ProgressValue = 0
		CenterDialog(oProgDlg)
		oProgDlg.SetVisible(True)
	End If
	
	&apos;Control the advance of the progress bar (for each 1%)
	Dim progressStep As Long
	Dim currentProgress as Integer
	Dim progressCount As Integer
	progressStep = selWidth / 100
	currentProgress = 0
	progressCount = 0
	
	&apos;Used to call sheet functions
	Dim fa : fa = createUNOService(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	
	&apos;Check if there are any values in the selected area
	Dim qtValues as Long
	qtValues = fa.callFunction(&quot;COUNTA&quot;, Array(ThisComponent.Sheets(sheetID).getCellRangeByName(oSel.AbsoluteName)))
	If qtValues = 0 Then Goto ReleaseLock
	
	&apos;Updates the Label information in the Progress Dialog
	If bShowProgress Then oLabControl.Label = &quot;Removing blank columns...&quot;
	
	&apos;Iterates from the last to the first column and removes blank columns
	Dim i as Long
	Dim countDeleted as Long
	Dim curRange as Object
	Dim countBlank as Integer
	For i = endCol to startCol Step -1
		&apos;Test if column is completely blank
		curRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(i, startRow, i, endRow)
		countBlank = fa.callFunction(&quot;COUNTBLANK&quot;, Array(curRange))
		&apos;If column is blank, then remove it
		If countBlank = selHeight Then
			ThisComponent.Sheets(sheetID).RemoveRange(curRange.RangeAddress, com.sun.star.sheet.CellDeleteMode.LEFT)
			countDeleted = countDeleted + 1
		End If
		
		&apos;Updates the progress bar if it&apos;s shown
		If bShowProgress Then
			progressCount = progressCount + 1
			If progressCount &gt;= progressStep Then
				currentProgress = currentProgress + 1
				If currentProgress &gt; 100 Then currentProgress = 100
				oLabControl.Label = &quot;Removing blank columns... &quot; &amp; currentProgress &amp; &quot;%&quot; 
				oProgControl.ProgressValue = currentProgress
				progressCount = 0
			End If
		End If
	Next i
	
	&apos;If there no columns were removed, exit the sub
	If countDeleted = 0 Then Goto ReleaseLock
	
	&apos;Inserts back the removed columns at the end of the new range (to preserve the position of cells outside the selected range)
	curRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol + (selWidth - countDeleted), startRow, endCol, endRow)
	ThisComponent.Sheets(sheetID).InsertCells(curRange.RangeAddress, com.sun.star.sheet.CellInsertMode.RIGHT)
	
	&apos;Select the new range after removing blanks
	Dim newRange as Object
	newRange = ThisComponent.Sheets(sheetID).getCellRangeByPosition(startCol, startRow, startCol + (selWidth - countDeleted) - 1, endRow)
	ThisComponent.CurrentController.Select(newRange)
	
	ReleaseLock:
	&apos;Unlocks screen updating
	ThisComponent.removeActionLock()
	ThisComponent.unlockControllers()
	Exit Sub
	
	&apos;Catches unexpected exception
	Catch:
		ShowBugWarning
		GoTo ReleaseLock
End Sub


&apos;************************************************************************************
&apos;
&apos;These methods show the RBDlg and close it when &quot;Do Nothing&quot; is pressed
&apos;
&apos;************************************************************************************
Sub RBDlg_Show
	Dim oLibD, oDlg
	DialogLibraries.LoadLibrary(&quot;RemoveBlankCells&quot;)
	oLibD = DialogLibraries.getByName(&quot;RemoveBlankCells&quot;)
	oDlg = oLibD.getByName(&quot;RBDlg&quot;)
	oRBDlg = CreateUnoDialog(oDlg)
	&apos;Centers the dialog window
	CenterDialog(oRBDlg)
	oRBDlg.execute()
End Sub

&apos;Sub associated with the OK button
Sub RBDlg_OK
	&apos;Determines which Option Button is selected
	Dim rbOption as Object
	
	&apos;Checks if Remove Blank Rows is selected
	rbOption = oRBDlg.getModel().getByName(&quot;OPRemoveRows&quot;)
	If rbOption.State Then
		RB_RemoveEmptyRows
		oRBDlg.endExecute()
		Exit Sub
	End If
	
	&apos;Checks if Remove Blank Rows is selected
	rbOption = oRBDlg.getModel().getByName(&quot;OPRemoveColumns&quot;)
	If rbOption.State Then
		RB_RemoveEmptyColumns
		oRBDlg.endExecute()
		Exit Sub
	End If
End Sub

&apos;Sub associated with the Cancel button
Sub RBDlg_Cancel
	oRBDlg.endExecute()
End Sub

&apos;Centers the provided dialog in the current window
Private Sub CenterDialog(oDlg as Object)
	&apos;Gets the current window size
	Dim oRect : oRect = ThisComponent.CurrentController.Frame.ContainerWindow.PosSize
	Dim winWidth  : winWidth  = oRect.Width
	Dim winHeight : winHeight = oRect.Height
	
	&apos;Resize the dialog
	Dim oModel : oModel = oDlg.getModel()
	Dim newPosX as Integer, newPosY as Integer
	newPosX = (winWidth - oModel.Width) / 2
	newPosY = (winHeight - oModel.Height) / 2
	oModel.PositionX = newPosX
	oModel.PositionY = newPosY
End Sub

Private Sub ShowBugWarning
	MsgBox &quot;An unexpected error occurred.&quot; &amp; CHR(13) &amp; _
			&quot;If you think this is a bug, report it at:&quot; &amp; CHR(13) &amp; _
			&quot;https://github.com/rafaelhlima/remove_blank_cells&quot;, _
			MB_ICONEXCLAMATION, &quot;Unexpected Error&quot;
End Sub

</script:module>